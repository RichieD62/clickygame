{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/Wrapper.js","components/HeroCard.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","score","bestScore","Jumbotron","Wrapper","children","HeroCard","onClick","handleClick","id","alt","name","src","image","height","width","Footer","App","state","clicked","list","heroes","shuffleArray","arr","map","Math","random","sort","b","_this","includes","resetGame","clickedArr","concat","Object","toConsumableArray","console","log","setState","handleIncrement","newArray","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","hero","components_HeroCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc006af9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Navbar = (props) => \r\n\r\n        (\r\n            <div>\r\n\r\n                <nav className=\"navbar navbar-light bg-danger\">\r\n                    <span className=\"navbar-brand mb-0 h1 text-left\">Clicky Game</span>\r\n\r\n                    <span className=\"navbar-brand mb-0 h1 text-center\">Click and Image to Begin!</span>\r\n\r\n                    <span className=\"navbar-brand mb-0 h1 text-right\">Score: {props.score} | Top Score: {props.bestScore}</span>\r\n                </nav>\r\n\r\n            </div>\r\n        )\r\n    \r\n\r\n\r\nexport default Navbar","import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return <div>\r\n\r\n        <div className=\"jumbotron\">\r\n        <br/>\r\n            <div className=\"container text-center\">\r\n                <h1 className=\"display-4\">Marvel Clicky Game!</h1>\r\n                <br/>\r\n                <br/>\r\n                <p className=\"lead\">Click on any of the superheroes below to begin!</p>\r\n            </div>\r\n            \r\n            <br/>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Jumbotron","import React from \"react\";\r\nimport \"./style/wrapper.css\";\r\n\r\nconst Wrapper = (props) => {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style/card.css\"\r\n// import Navbar from \"./Navbar\"\r\n\r\n\r\n\r\n\r\nconst HeroCard = (props) => (\r\n\r\n    <div onClick={() => props.handleClick(props.id)} className=\"card\">\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} height=\"350px\" width=\"350px\" />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default HeroCard;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return <div>\r\n\r\n    <nav className=\"navbar navbar-light bg-danger\">\r\n        <span className=\"navbar-brand mb-0 h1 text-left\">Clicky Game</span>\r\n    </nav>\r\n\r\n</div>\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\"\nimport Wrapper from \"./components/Wrapper\"\nimport HeroCard from \"./components/HeroCard\"\nimport heroes from \"./heroes.json\"\nimport Footer from \"./components/Footer\"\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  state = {\n    clicked: [],\n    list: heroes,\n    score: 0,\n    bestScore: 0\n}\n\n\nshuffleArray = arr => (\n    arr\n      .map(a => [Math.random(), a])\n      .sort((a, b) => a[0] - b[0])\n      .map(a => a[1])      \n)\n\n\nhandleClick = (id) => {\n    if (this.state.clicked.includes(id)) {\n        this.resetGame();\n\n        \n    } else {\n      let clickedArr = [...this.state.clicked, id]\n      console.log(clickedArr)\n      this.setState( {clicked: clickedArr} )\n      this.handleIncrement();\n      let newArray = this.shuffleArray(this.state.list); \n      this.setState({list: newArray})\n      console.log(newArray);\n    }\n}\n\nhandleIncrement = () => {\n  if (this.state.score >= this.state.bestScore) {\n      this.setState({ score: this.state.score += 1 });\n      this.setState({ bestScore: this.state.bestScore += 1 })\n  } else {\n      this.setState({ score: this.state.score += 1 });\n  }\n  \n};\n\nresetGame = () => {\n  this.setState({\n    score: 0,\n    clicked: []\n  })\n  //empty clicked heroes array\n  //set current score = 0\n  //modal saying you lose\n}\n\n  render() {\n    return (\n      <div>\n        <Navbar \n        bestScore={this.state.bestScore}\n        score={this.state.score}/>\n        <Jumbotron />\n        <Wrapper>\n        {this.state.list.map(hero => (\n          <HeroCard\n            id={hero.id}\n            key={hero.id}\n            name={hero.name}\n            image={hero.image}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </Wrapper>\n      <Footer />\n\n      </div>\n    )\n  }\n\n\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}